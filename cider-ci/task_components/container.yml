scripts:

  start-container:
    exclusive_executor_resource: 'vagrant_updown'
    timeout: 10 Minutes
    body: vagrant up --no-provision # this is locking, so keep it fast and dont provision yet

  prepare-container:
    timeout: 5 Minutes
    start_when:
      started: { script_key: start-container }
    body: |
      vagrant provision
      ./scripts/build-inventory.sh

  deploy-to-container:
    timeout: 60 Minutes
    start_when:
      inventory: { script_key: prepare-container }
    body: |
      ./scripts/deploy-to-vagrant.sh

  tune-for-testing:
    timeout: 5 Minutes
    start_when:
      deployed: { script_key: deploy-to-container }
    body: |
      vagrant ssh -- "systemctl stop postgresql; systemctl stop 'leihs*'"
      vagrant ssh -- 'sudo sh /vagrant/scripts/config-postgres-for-vagrant.sh'
      # FIXME: does not survive restarting of postgres, so restart the machine
      vagrant suspend ; vagrant reload
      vagrant ssh -- "sudo systemctl restart 'leihs*'"
      # wait for webservice
      until curl --fail -s http://localhost:10080; do sleep 3; done && curl -v http://localhost:10080 | head -25

  test:
    start_when:
      tuned: { script_key: tune-for-testing }

  stop-container:
    exclusive_executor_resource: 'vagrant_updown'
    timeout: 1 hour
    start_when:
      test in terminal state:
        script_key: test
        states: [aborted, passed, failed, skipped]
    ignore_abort: yes
    body: vagrant halt --force ; vagrant destroy --force
