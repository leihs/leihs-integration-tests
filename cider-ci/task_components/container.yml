scripts:

  start-container:
    exclusive_executor_resource: 'vagrant_updown'
    timeout: 10 Minutes
    body: |
      #!/bin/sh -exu
      cd ./integration-tests
      vagrant up --no-provision # this is locking, so keep it fast and dont provision yet

  prepare-container:
    timeout: 15 Minutes
    start_when:
      started: { script_key: start-container }
    body: |
      #!/bin/sh -exu
      cd ./integration-tests
      vagrant provision

  deploy-to-container:
    timeout: 60 Minutes
    start_when:
      inventory: { script_key: prepare-container }
    body: |
      #!/bin/sh -exu
      cd ./integration-tests
      date
      time ./scripts/deploy-to-vagrant.sh

      ./scripts/ansible-to-vagrant.sh stop_play.yml
      sh -c 'cd ../deploy && bin/ansible leihs_server -i ../integration-tests/inventory/hosts -mshell -a /vagrant/scripts/config-postgres-for-vagrant.sh'
      ./scripts/ansible-to-vagrant.sh start_play.yml

      # wait for webservice, print result for debugging
      until curl --fail -k https://localhost:${LEIHS_HOST_PORT_HTTPS}; do sleep 5; done \
        && curl -kv https://localhost:${LEIHS_HOST_PORT_HTTPS} | head -25

  test:
    timeout: 20 Minutes
    start_when:
      deployed: { script_key: deploy-to-container }

  stop-container:
    exclusive_executor_resource: 'vagrant_updown'
    timeout: 1 hour
    start_when:
      test in terminal state:
        script_key: test
        states: [aborted, passed, failed, skipped]
    ignore_abort: yes
    body: |
      #!/bin/sh -exu
      cd ./integration-tests
      vagrant halt --force ; vagrant destroy --force
